// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package dbutil

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO post (
  uri, cid, "indexedAt"
) VALUES (
  $1, $2, $3
)
RETURNING uri, cid, "indexedAt"
`

type CreatePostParams struct {
	Uri       string
	Cid       string
	IndexedAt string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.Uri, arg.Cid, arg.IndexedAt)
	var i Post
	err := row.Scan(&i.Uri, &i.Cid, &i.IndexedAt)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM post
WHERE uri = $1
`

func (q *Queries) DeletePost(ctx context.Context, uri string) error {
	_, err := q.db.Exec(ctx, deletePost, uri)
	return err
}

const getPost = `-- name: GetPost :one
SELECT uri, cid, "indexedAt" FROM post
WHERE uri = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, uri string) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, uri)
	var i Post
	err := row.Scan(&i.Uri, &i.Cid, &i.IndexedAt)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT uri, cid, "indexedAt" FROM post
ORDER BY "indexedAt"
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(&i.Uri, &i.Cid, &i.IndexedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
