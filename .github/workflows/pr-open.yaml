name: Create Deployment
on:
  pull_request:
    types: [opened, reopened]
env:
 BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 
jobs:
  convert-branch-name:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.convert.outputs.name }}
    steps:
      - id: convert
        env:
            BRANCH_NAME: "${{ github.head_ref || github.ref_name }}"
        run: |
          output=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed -E 's/^-+|-+$//g')
          echo "original branch name: $BRANCH_NAME"
          echo "converted branch name: $output"
          echo "name=$output" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs: convert-branch-name
    env:
        BRANCH_NAME: ${{needs.convert-branch-name.outputs.name}}
    steps:
    - uses: actions/checkout@v4
    - name: Print Branch Name
      run: echo "$BRANCH_NAME"
    - name: Print Branch Name
      env:
          BRANCH_NAME: ${{needs.convert-branch-name.outputs.name}}
      run: echo "$BRANCH_NAME"
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build image
      run: make docker
    - name: Push image with commit sha
      run: make docker-push TAG=$BRANCH_NAME-$(git rev-parse --short "$GITHUB_SHA")
    - name: Push image with latest tag
      run: make docker-push TAG=$BRANCH_NAME-latest
  deploy:
    needs: [build, convert-branch-name]
    name: Create Deployment
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{needs.convert-branch-name.outputs.name}}
    env:
      REGISTRY: ${{ vars.DOCKERHUB_USERNAME }}
    steps:
      - name: Create Deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: BRANCH_NAME, REGISTRY
          script: |
            kubectl create namespace boshi-$BRANCH_NAME
            kubectl create deployment boshi-backend --image=$REGISTRY/boshi-backend:$BRANCH_NAME-latest --port=80 -n boshi-$BRANCH_NAME
            kubectl create service clusterip boshi-svc --tcp=80:80 -n boshi-$BRANCH_NAME
            kubectl expose deployment boshi-backend --name=boshi-svc --port=80 --target-port=80 --type=ClusterIP -n boshi-$BRANCH_NAME
            kubectl create ingress ingress --class=nginx --rule="$BRANCH_NAME-api-boshi.deguzman.cloud/=boshi-svc:80,tls=boshi-tls" -n boshi-$BRANCH_NAME
