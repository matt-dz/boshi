name: Branch Push
on: push
jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      landing: ${{ steps.filter.outputs.landing }}
      frontend: ${{ steps.filter.outputs.frontend }}
      explorer: ${{ steps.filter.outputs.explorer }}
      tourbillon: ${{ steps.filter.outputs.tourbillon }}
      kubernetes: ${{ steps.filter.outputs.kubernetes }}
      kubernetes_files: ${{ steps.filter.outputs.kubernetes_files }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.head_ref || github.ref_name }}
          list-files: json
          filters: |
            landing:
              - 'landing/**'
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            explorer:
              - 'explorer/**'
            tourbillon:
              - 'tourbillon/**'
            kubernetes:
              - 'kubernetes/**'
      - name: Debug
        run: |
          echo "${{ contains( fromJson(steps.filter.outputs.kubernetes_files), 'kubernetes/backend.yaml' ) }}"

  build-info:
    name: Get Build Info
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.build-info.outputs.branch-name }}
      namespace: ${{ steps.build-info.outputs.namespace }}
      namespace-exists: ${{ steps.namespace.outputs.exists }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-info
        id: build-info
      - uses: ./.github/actions/k8s/namespace-exists
        name: Check Namespace
        id: namespace
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          namespace: ${{ steps.build-info.outputs.namespace }}
          kube-deploy-key: ${{ secrets.KUBE_DEPLOY_KEY }}
          kube-deploy-url: ${{ vars.KUBE_DEPLOY_URL }}

  clone-repo:
    needs: [changes, build-info]
    if: ${{ needs.build-info.outputs.namespace-exists == 'false' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.landing == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.explorer == 'true' || needs.changes.outputs.tourbillon == 'true' || needs.changes.outputs.kubernetes == 'true' }}
    name: Clone Repo
    runs-on: ubuntu-latest
    outputs:
      repo-destination: ${{ steps.destination.outputs.repo-destination }}
    steps:
      - uses: actions/checkout@v4
      - shell: bash
        id: destination
        run: |
          echo "repo-destination=$(mktemp -d)" >> $GITHUB_OUTPUT
      - uses: appleboy/ssh-action@v1.2.0
        name: Clone Repo
        id: clone
        env:
          DESTINATION: ${{ steps.destination.outputs.repo-destination }}
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: BRANCH_NAME,DESTINATION,REPO_URL
          script: |
            echo "Cloning repo..."
            mkdir -p $DESTINATION
            echo ${BRANCH_NAME}
            echo ${REPO_URL}
            echo $DESTINATION
            git clone --depth 1 -b ${BRANCH_NAME} ${REPO_URL} $DESTINATION

  build-and-deploy-backend:
    needs: [changes, build-info, clone-repo]
    if: ${{ needs.changes.outputs.backend == 'true' || needs.build-info.outputs.namespace-exists == 'false' || contains(needs.changes.outputs.kubernetes_files, 'kubernetes/backend.yaml') }}
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    env:
      build_name: ${{vars.DOCKER_REGISTRY}}/boshi-backend
      build_docker: ${{ needs.changes.outputs.backend == 'true' || needs.build-info.outputs.namespace-exists == 'false' }}
      frontend_base_url: https://${{ github.ref_name == 'main' && 'boshi' || format('{0}-boshi', needs.build-info.outputs.branch-name) }}.deguzman.cloud
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi-api
          dev: ${{ needs.build-info.outputs.branch-name }}-boshi-api
      - name: Login to Docker Hub
        if: ${{ env.build_docker == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker Image
        if: ${{ env.build_docker == 'true' }}
        working-directory: backend
        shell: bash
        run: |
          OAUTH_BASE_URL=${{ env.frontend_base_url }} \
          OAUTH_REDIRECT_URI=${{ env.frontend_base_url }}/login/redirect/ \
          make docker
      - name: Push Docker Image with SHA Tag
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/push
        with:
          build-name: ${{ env.build_name }}
          tag: ${{ github.sha }}
      - name: Push Docker Image with latest Tag
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/push
        with:
          build-name: ${{ env.build_name }}
          tag: ${{ needs.build-info.outputs.branch-name }}-latest
      - name: Create Deployment
        uses: ./.github/actions/k8s/deploy
        env:
          CLUSTER_ISSUER: ${{secrets.CERT_MANAGER_CLUSTER_ISSUER}}
          POSTGRES_URL: ${{secrets.POSTGRES_URL}}
          SMTP_FROM: ${{secrets.SMTP_FROM}}
          SMTP_HOST: ${{secrets.SMTP_HOST}}
          SMTP_PORT: ${{secrets.SMTP_PORT}}
          SMTP_USERNAME: ${{secrets.SMTP_USERNAME}}
          SMTP_PASSWORD: ${{secrets.SMTP_PASSWORD}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          domain: ${{ steps.domain.outputs.domain }}.deguzman.cloud
          config-path: ${{ needs.clone-repo.outputs.repo-destination }}/kubernetes/backend.yaml
          docker-image: ${{ env.build_name }}:${{ env.build_docker == 'true' && github.sha || format('{0}-latest', needs.build-info.outputs.branch-name) }}
          namespace: ${{ needs.build-info.outputs.namespace }}
          config-envs: CLUSTER_ISSUER,POSTGRES_URL,SMTP_FROM,SMTP_HOST,SMTP_PORT,SMTP_USERNAME,SMTP_PASSWORD

  build-and-deploy-landing:
    needs: [changes, build-info, clone-repo]
    if: ${{ needs.changes.outputs.landing == 'true' || needs.build-info.outputs.namespace-exists == 'false' || contains(needs.changes.outputs.kubernetes_files, 'kubernetes/landing.yaml') }}
    name: Build and Deploy Landing
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    env:
      build_name: ${{ vars.DOCKER_REGISTRY }}/boshi-landing
      build_docker: ${{ needs.changes.outputs.landing == 'true' || needs.build-info.outputs.namespace-exists == 'false' }}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        if: ${{ env.build_docker == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker Image
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/build
        with:
          build-name: ${{ env.build_name }}
          path: landing
      - name: Push Docker Image with SHA Tag
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/push
        with:
          build-name: ${{ env.build_name }}
          tag: ${{ github.sha }}
      - name: Push Docker Image with latest Tag
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/push
        with:
          build-name: ${{ env.build_name }}
          tag: ${{ needs.build-info.outputs.branch-name }}-latest
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi-app
          dev: ${{ needs.build-info.outputs.branch-name }}-boshi-app
      - name: Create/Update Deployment
        uses: ./.github/actions/k8s/deploy
        env:
          CLUSTER_ISSUER: ${{secrets.CERT_MANAGER_CLUSTER_ISSUER}}
          PUBLIC_API_URL: https://${{ github.ref_name != 'main' && format('{0}-', needs.build-info.outputs.branch-name) || '' }}boshi-api.deguzman.cloud
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          domain: ${{ steps.domain.outputs.domain }}.deguzman.cloud
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/landing.yaml
          docker-image: ${{ env.build_name }}:${{ env.build_docker == 'true' && github.sha || format('{0}-latest', needs.build-info.outputs.branch-name) }}
          namespace: ${{ needs.build-info.outputs.namespace }}
          config-envs: CLUSTER_ISSUER,PUBLIC_API_URL

  build-and-deploy-frontend:
    needs: [changes, build-info, clone-repo]
    if: ${{ needs.changes.outputs.frontend == 'true' || needs.build-info.outputs.namespace-exists == 'false' || contains(needs.changes.outputs.kubernetes_files, 'kubernetes/frontend.yaml') }}
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    env:
      build_name: ${{ vars.DOCKER_REGISTRY }}/boshi-frontend
      build_docker: ${{ needs.changes.outputs.frontend == 'true' || needs.build-info.outputs.namespace-exists == 'false' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi
          dev: ${{needs.build-info.outputs.branch-name}}-boshi
      - name: Login to Docker Hub
        if: ${{ env.build_docker == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker Image
        if: ${{ env.build_docker == 'true' }}
        working-directory: frontend
        shell: bash
        run: |
          HOST=${{ steps.domain.outputs.domain }} \
          BACKEND_BASE_URL=https://${{ steps.domain.outputs.domain }}-api.deguzman.cloud \
          make docker
      - name: Push Docker Image with SHA Tag
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/push
        with:
          build-name: ${{ env.build_name }}
          tag: ${{ github.sha }}
      - name: Push Docker Image with latest Tag
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/push
        with:
          build-name: ${{ env.build_name }}
          tag: ${{ needs.build-info.outputs.branch-name }}-latest
      - name: Create/Update Deployment
        uses: ./.github/actions/k8s/deploy
        env:
          CLUSTER_ISSUER: ${{secrets.CERT_MANAGER_CLUSTER_ISSUER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          domain: ${{ steps.domain.outputs.domain }}.deguzman.cloud
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/frontend.yaml
          docker-image: ${{ env.build_name }}:${{ env.build_docker == 'true' && github.sha || format('{0}-latest', needs.build-info.outputs.branch-name) }}
          namespace: ${{ needs.build-info.outputs.namespace }}
          config-envs: CLUSTER_ISSUER

  build-and-deploy-explorer:
    needs: [changes, build-info, clone-repo]
    if: ${{ needs.changes.outputs.explorer == 'true' || needs.build-info.outputs.namespace-exists == 'false' || contains(needs.changes.outputs.kubernetes_files, 'kubernetes/explorer.yaml')}}
    name: Build and Deploy Explorer
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    env:
      build_name: ${{ vars.DOCKER_REGISTRY }}/boshi-explorer
      build_docker: ${{ needs.changes.outputs.explorer == 'true' || needs.build-info.outputs.namespace-exists == 'false' }}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        if: ${{ env.build_docker == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker Image
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/build
        with:
          build-name: ${{ env.build_name }}
          path: explorer
      - name: Push Docker Image with SHA Tag
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/push
        with:
          build-name: ${{ env.build_name }}
          tag: ${{ github.sha }}
      - name: Push Docker Image with latest Tag
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/push
        with:
          build-name: ${{ env.build_name }}
          tag: ${{ needs.build-info.outputs.branch-name }}-latest
      - name: Create/Update Deployment
        uses: ./.github/actions/k8s/deploy
        env:
          POSTGRES_URL: ${{secrets.POSTGRES_URL}}
          SOCKET_URI: ${{secrets.SOCKET_URI}}
          FIREHOSE_IDENTIFIER: ${{secrets.FIREHOSE_IDENTIFIER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/explorer.yaml
          docker-image: ${{ env.build_name }}:${{ env.build_docker == 'true' && github.sha || format('{0}-latest', needs.build-info.outputs.branch-name) }}
          namespace: ${{ needs.build-info.outputs.namespace }}
          config-envs: POSTGRES_URL,SOCKET_URI,FIREHOSE_IDENTIFIER

  build-and-deploy-tourbillon:
    needs: [changes, build-info, clone-repo]
    if: ${{ needs.changes.outputs.tourbillon == 'true' || needs.build-info.outputs.namespace-exists == 'false' || contains(needs.changes.outputs.kubernetes_files, 'kubernetes/tourbillon.yaml')}}
    name: Build and Deploy Tourbillon
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    env:
      build_name: ${{ vars.DOCKER_REGISTRY }}/boshi-tourbillon
      build_docker: ${{ needs.changes.outputs.tourbillon == 'true' || needs.build-info.outputs.namespace-exists == 'false' }}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        if: ${{ env.build_docker == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker Image
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/build
        with:
          build-name: ${{ env.build_name }}
          path: tourbillon
      - name: Push Docker Image with SHA Tag
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/push
        with:
          build-name: ${{ env.build_name }}
          tag: ${{ github.sha }}
      - name: Push Docker Image with latest Tag
        if: ${{ env.build_docker == 'true' }}
        uses: ./.github/actions/docker/push
        with:
          build-name: ${{ env.build_name }}
          tag: ${{ needs.build-info.outputs.branch-name }}-latest
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi-tourbillon
          dev: ${{needs.build-info.outputs.branch-name}}-boshi-tourbillon
      - name: Create/Update Deployment
        uses: ./.github/actions/k8s/deploy
        env:
          FEEDGEN_PORT: ${{secrets.FEEDGEN_PORT}}
          FEEDGEN_LISTENHOST: ${{secrets.FEEDGEN_LISTENHOST}}
          FEEDGEN_POSTGRES_DATABASE: ${{secrets.POSTGRES_DATABASE}}
          FEEDGEN_POSTGRES_USERNAME: ${{secrets.POSTGRES_USERNAME}}
          FEEDGEN_POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          FEEDGEN_POSTGRES_HOST: ${{secrets.POSTGRES_HOST}}
          FEEDGEN_POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
          FEEDGEN_SUBSCRIPTION_ENDPOINT: ${{secrets.FEEDGEN_SUBSCRIPTION_ENDPOINT}}
          FEEDGEN_HOSTNAME: ${{ steps.domain.outputs.domain }}.deguzman.cloud
          FEEDGEN_PUBLISHER_DID: ${{secrets.FEEDGEN_PUBLISHER_DID}}
          FEEDGEN_SUBSCRIPTION_RECONNECT_DELAY: ${{secrets.FEEDGEN_SUBSCRIPTION_RECONNECT_DELAY}}
          CLUSTER_ISSUER: ${{secrets.CERT_MANAGER_CLUSTER_ISSUER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/tourbillon.yaml
          domain: ${{ steps.domain.outputs.domain }}.deguzman.cloud
          docker-image: ${{ env.build_name }}:${{ env.build_docker == 'true' && github.sha || format('{0}-latest', needs.build-info.outputs.branch-name) }}
          namespace: ${{ needs.build-info.outputs.namespace }}
          config-envs: FEEDGEN_PORT,FEEDGEN_LISTENHOST, FEEDGEN_POSTGRES_LOCATION,FEEDGEN_POSTGRES_DATABASE,FEEDGEN_POSTGRES_USERNAME,FEEDGEN_POSTGRES_PASSWORD,FEEDGEN_POSTGRES_HOST,FEEDGEN_POSTGRES_PORT,FEEDGEN_SUBSCRIPTION_ENDPOINT,FEEDGEN_HOSTNAME,FEEDGEN_PUBLISHER_DID,FEEDGEN_SUBSCRIPTION_RECONNECT_DELAY,CLUSTER_ISSUER

  cleanup:
    needs:
      [
        build-info,
        clone-repo,
        build-and-deploy-backend,
        build-and-deploy-landing,
        build-and-deploy-frontend,
        build-and-deploy-explorer,
        build-and-deploy-tourbillon,
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup Worker
        uses: appleboy/ssh-action@v1.2.0
        env:
          REPO_DESTINATION: ${{needs.clone-repo.outputs.repo-destination}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: REPO_DESTINATION
          script: |
            rm -rf ${REPO_DESTINATION}
