name: Branch Push
on: push
jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      landing: ${{ steps.filter.outputs.landing }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            landing:
              - 'landing/**'
              - '!landing/README.md'
            backend:
              - 'backend/**'
              - '!backend/env.example'
            frontend:
              - 'frontend/**'
              - '!frontend/README.md'

  get-build-info:
    needs: changes
    name: Get Build Info
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.landing == 'true' || needs.changes.outputs.frontend == 'true' }}
    outputs:
      name: ${{ steps.convert.outputs.name }}
      commit-id: ${{ steps.convert.outputs.commit-id }}
    steps:
      - uses: actions/checkout@v4
      - id: convert
        env:
          BRANCH_NAME: "${{ github.head_ref || github.ref_name }}"
        shell: bash
        run: |
          output=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed -E 's/^-+|-+$//g')
          echo "name=$output" >> $GITHUB_OUTPUT
          git rev-parse --short HEAD | xargs -I {} echo "commit-id={}" >> $GITHUB_OUTPUT

  build-backend:
    needs: [changes, get-build-info]
    name: Build Backend
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{needs.get-build-info.outputs.name}}
      COMMIT_ID: ${{needs.get-build-info.outputs.commit-id}}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Backend
        shell: bash
        run: |
          echo "Building backend..."
          cd backend && make docker

          echo "Pushing images..."
          if [[ $BRANCH_NAME == "main" ]]; then
            make docker-push TAG=$COMMIT_ID
            make docker-push TAG=latest
          else
            make docker-push TAG=$BRANCH_NAME-$COMMIT_ID
            make docker-push TAG=$BRANCH_NAME-latest
          fi

  build-landing:
    needs: [changes, get-build-info]
    name: Build Landing
    if: ${{ needs.changes.outputs.landing == 'true' }}
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{needs.get-build-info.outputs.name}}
      COMMIT_ID: ${{needs.get-build-info.outputs.commit-id}}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Landing
        shell: bash
        run: |
          echo "Building Landing"
          cd landing && make docker

          echo "Push images"
          if [[ $BRANCH_NAME == "main" ]]; then
            make docker-push TAG=$COMMIT_ID
            make docker-push TAG=latest
          else
            make docker-push TAG=$BRANCH_NAME-$COMMIT_ID
            make docker-push TAG=$BRANCH_NAME-latest
          fi

  build-frontend:
    needs: [changes, get-build-info]
    name: Build Frontend
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{needs.get-build-info.outputs.name}}
      COMMIT_ID: ${{needs.get-build-info.outputs.commit-id}}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Frontend
        shell: bash
        run: |
          echo "Building Frontend"
          cd frontend && make docker

          echo "Push images"
          if [[ $BRANCH_NAME == "main" ]]; then
            make docker-push TAG=$COMMIT_ID
            make docker-push TAG=latest
          else
            make docker-push TAG=$BRANCH_NAME-$COMMIT_ID
            make docker-push TAG=$BRANCH_NAME-latest
          fi

  deploy-backend:
    needs: [changes, build-backend, get-build-info]
    name: Deploy Backend
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{needs.get-build-info.outputs.name}}
      REGISTRY: ${{ vars.DOCKER_REGISTRY }}
      COMMIT_ID: ${{needs.get-build-info.outputs.commit-id}}
    steps:
      - name: Create/Update Backend Deployment
        if: ${{ needs.changes.outputs.backend == 'true' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: BRANCH_NAME,REGISTRY,COMMIT_ID
          script: |
            if [[ $BRANCH_NAME == "main" ]]; then
              export NAMESPACE="boshi";
              export SUBDOMAIN="boshi"
              export TAG="$COMMIT_ID";
            else
              export NAMESPACE="boshi-$BRANCH_NAME";
              export SUBDOMAIN="$BRANCH_NAME-boshi";
              export TAG="$BRANCH_NAME-$COMMIT_ID";
            fi

            echo "Namespace: $NAMESPACE"
            echo "Subdomain: $SUBDOMAIN"
            echo "Tag: $TAG"

            if kubectl get deployment boshi-backend -n $NAMESPACE >/dev/null 2>&1; then
              kubectl set image deployments boshi-backend boshi-backend=$REGISTRY/boshi-backend:$TAG -n $NAMESPACE
            else
              kubectl create namespace $NAMESPACE
              kubectl create deployment boshi-backend --image=$REGISTRY/boshi-backend:$TAG --port=80 -n $NAMESPACE
              kubectl expose deployment boshi-backend --name=boshi-backend-svc --port=80 --target-port=80 --type=ClusterIP -n $NAMESPACE
              kubectl create ingress ingress --annotation cert-manager.io/cluster-issuer="letsencrypt-prod" --class=nginx --rule="$SUBDOMAIN.deguzman.cloud/api/*=boshi-backend-svc:80,tls=boshi-tls" --rule="$SUBDOMAIN.deguzman.cloud/oauth/*=boshi-backend-svc:80,tls=boshi-tls" -n $NAMESPACE
            fi

  deploy-landing:
    needs: [changes, build-landing, get-build-info]
    name: Deploy Landing
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{needs.get-build-info.outputs.name}}
      REGISTRY: ${{ vars.DOCKER_REGISTRY }}
      COMMIT_ID: ${{needs.get-build-info.outputs.commit-id}}
    steps:
      - name: Create/Update Landing Deployment
        if: ${{ needs.changes.outputs.landing == 'true' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: BRANCH_NAME,REGISTRY,COMMIT_ID
          script: |
            if [[ $BRANCH_NAME == "main" ]]; then
              export NAMESPACE="boshi";
              export SUBDOMAIN="boshi-app";
              export TAG="$COMMIT_ID";
            else
              export NAMESPACE="boshi-$BRANCH_NAME";
              export SUBDOMAIN="$BRANCH_NAME-boshi-app";
              export TAG="$BRANCH_NAME-$COMMIT_ID";
            fi

            echo "Namespace: $NAMESPACE"
            echo "Subdomain: $SUBDOMAIN"
            echo "Tag: $TAG"

            if kubectl get deployment boshi-landing -n $NAMESPACE $1 >/dev/null 2>&1; then
              kubectl set image deployments boshi-landing boshi-landing=$REGISTRY/boshi-landing:$TAG -n $NAMESPACE
            else
              kubectl create namespace $NAMESPACE
              kubectl create deployment boshi-landing --image=$REGISTRY/boshi-landing:$TAG --port=3000 -n $NAMESPACE
              kubectl expose deployment boshi-landing --name=boshi-landing-svc --port=80 --target-port=3000 --type=ClusterIP -n $NAMESPACE
              kubectl create ingress landing-ingress --annotation cert-manager.io/cluster-issuer="letsencrypt-prod" --class=nginx --rule="$SUBDOMAIN.deguzman.cloud/*=boshi-landing-svc:80,tls=boshi-landing-tls" -n $NAMESPACE
            fi

  deploy-frontend:
    needs: [changes, build-frontend, get-build-info]
    name: Deploy Frontend
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{needs.get-build-info.outputs.name}}
      REGISTRY: ${{ vars.DOCKER_REGISTRY }}
      COMMIT_ID: ${{needs.get-build-info.outputs.commit-id}}
    steps:
      - name: Create/Update Landing Deployment
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: BRANCH_NAME,REGISTRY,COMMIT_ID
          script: |
            if [[ $BRANCH_NAME == "main" ]]; then
              export NAMESPACE="boshi";
              export SUBDOMAIN="boshi-app";
              export TAG="$COMMIT_ID";
            else
              export NAMESPACE="boshi-$BRANCH_NAME";
              export SUBDOMAIN="$BRANCH_NAME-boshi-app";
              export TAG="$BRANCH_NAME-$COMMIT_ID";
            fi

            echo "Namespace: $NAMESPACE"
            echo "Subdomain: $SUBDOMAIN"
            echo "Tag: $TAG"

            if kubectl get deployment boshi-frontend -n $NAMESPACE $1 >/dev/null 2>&1; then
              kubectl set image deployments boshi-frontend boshi-frontend=$REGISTRY/boshi-frontend:$TAG -n $NAMESPACE
            else
              kubectl create namespace $NAMESPACE
              kubectl create deployment boshi-frontend --image=$REGISTRY/boshi-frontend:$TAG --port=8080 -n $NAMESPACE
              kubectl expose deployment boshi-frontend --name=boshi-frontend-svc --port=80 --target-port=8080 --type=ClusterIP -n $NAMESPACE
              kubectl create ingress frontend-ingress --annotation cert-manager.io/cluster-issuer="letsencrypt-prod" --class=nginx --rule="$SUBDOMAIN.deguzman.cloud/*=boshi-frontend-svc:80,tls=boshi-frontend-tls" -n $NAMESPACE
            fi
