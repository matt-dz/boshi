name: Branch Push
on: push
jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      landing: ${{ steps.filter.outputs.landing }}
      frontend: ${{ steps.filter.outputs.frontend }}
      explorer: ${{ steps.filter.outputs.explorer }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            landing:
              - 'landing/**'
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            explorer:
              - 'explorer/**'

  get-build-info:
    needs: changes
    name: Get Build Info
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.landing == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.explorer == 'true' }}
    outputs:
      name: ${{ steps.convert.outputs.name }}
      namespace: ${{ steps.convert.outputs.namespace }}
      docker-tag: ${{ steps.convert.outputs.docker-tag }}
      commit-id: ${{ steps.convert.outputs.commit-id }}
      backend-exists: ${{ steps.check.outputs.backend-exists }}
      frontend-exists: ${{ steps.check.outputs.frontend-exists }}
      landing-exists: ${{ steps.check.outputs.landing-exists }}
      explorer-exists: ${{ steps.check.outputs.explorer-exists }}
    steps:
      - uses: actions/checkout@v4
      - id: convert
        env:
          BRANCH_NAME: "${{ github.head_ref || github.ref_name }}"
        shell: bash
        run: |
          commit-id=$(git rev-parse --short HEAD)

          echo "name=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed -E 's/^-+|-+$//g')" >> $GITHUB_OUTPUT
          echo "namespace=$([[ "$branch-name" == "main" ]] && echo "boshi" || echo "boshi-${branch-name}")" >> $GITHUB_OUTPUT
          echo "docker-tag=$([[ "$branch-name" == "main" ]] && echo "${commit-id}" || echo "${branch-name}-${commit-id}")) >> $GITHUB_OUTPUT

      - name: Check Resources
        id: check
        uses: appleboy/ssh-action@v1.2.0
        env:
          NAMESPACE: ${{ steps.convert.outputs.namespace }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: NAMESPACE
          script: |
            echo $(kubectl get deployment boshi-backend -n "$NAMESPACE" > /dev/null 2>&1 && echo "backend-exists=true" || echo "backend-exists=false") >> $GITHUB_OUTPUT
            echo $(kubectl get deployment boshi-frontend -n "$NAMESPACE" > /dev/null 2>&1 && echo "frontend-exists=true" || echo "frontend-exists=false") >> $GITHUB_OUTPUT
            echo $(kubectl get deployment boshi-landing -n "$NAMESPACE" > /dev/null 2>&1 && echo "landing-exists=true" || echo "landing-exists=false") >> $GITHUB_OUTPUT
            echo $(kubectl get deployment explorer -n "$NAMESPACE" > /dev/null 2>&1 && echo "explorer-exists=true" || echo "explorer-exists=false") >> $GITHUB_OUTPUT

  clone-repo:
    name: Clone Repo
    needs: [get-build-info]
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{needs.get-build-info.outputs.branch-name}}
    outputs:
      repo-destination: ${{ steps.clone.outputs.destination }}
    steps:
      - uses: actions/checkout@v4
      - shell: bash
        id: destination
        run: |
          echo "repo-destination=$(mktemp -d)" >> $GITHUB_OUTPUT
      - uses: appleboy/ssh-action@v.1.2.0
        name: Clone Repo
        id: clone
        env:
          DESTINATION: ${{ steps.destination.outputs.destination }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: BRANCH_NAME,DESTINATION
          script: |
            echo "Cloning repo..."
            mkdir -p $DESTINATION
            git clone --depth 1 -b ${BRANCH_NAME} https://github.com/matt-dz/boshi.git $DESTINATION

  build-and-deploy-backend:
    needs: [changes, get-build-info, clone-repo]
    name: Build and Deploy Backend
    if: ${{ needs.changes.outputs.backend == 'true' || needs.get-build-info.outputs.backend-exists == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: ./.github/actions/docker
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tag: ${{needs.get-build-info.outputs.docker-tag}}
          path: backend
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi
          branch: ${{needs.get-build-info.outputs.name}}
      - name: Create/Update Backend Deployment
        uses: ./.github/actions/k8s
        env:
          CLUSTER_ISSUER: ${{secrets.CERT_MANAGER_CLUSTER_ISSUER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          deployment: boshi-backend
          domain: ${{ steps.domain.outputs.domain }}
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/backend.yaml
          docker-registry: ${{vars.DOCKER_REGISTRY}}
          docker-tag: ${{needs.get-build-info.outputs.docker-tag}}
          namespace: ${{ needs.get-build-info.outputs.namespace }}
          config-envs: CLUSTER_ISSUER
          # envs: BRANCH_NAME,REGISTRY,CLUSTER_ISSUER,REPO_DESTINATION,DOCKER_TAG
          # script: |
          #   export DOMAIN="$([[ "$branch-name" == "main" ]] && echo "boshi" || echo "${BRANCH_NAME}-boshi").deguzman.cloud"
          #   export IMAGE=$REGISTRY/boshi-backend:$DOCKER_TAG

          #   if kubectl get deployment boshi-backend -n $NAMESPACE >/dev/null 2>&1; then
          #     kubectl set image deployments boshi-backend boshi-backend=$IMAGE -n $NAMESPACE
          #   else
          #     kubectl create namespace $NAMESPACE
          #     envsubst < $REPO_DESTINATION/kubernetes/backend.yaml \
          #       | kubectl apply -f - -n $NAMESPACE
          #   fi

  build-and-deploy-landing:
    needs: [changes, get-build-info, clone-repo]
    name: Build and Deploy Landing
    if: ${{ needs.changes.outputs.landing == 'true' || needs.get-build-info.outputs.landing-exists == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/docker
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tag: ${{needs.get-build-info.outputs.docker-tag}}
          path: landing
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi
          branch: ${{needs.get-build-info.outputs.name}}
      - name: Create/Update Backend Deployment
        uses: ./.github/actions/k8s
        env:
          CLUSTER_ISSUER: ${{secrets.CERT_MANAGER_CLUSTER_ISSUER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          deployment: boshi-landing
          domain: ${{ steps.domain.outputs.domain }}
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/landing.yaml
          docker-registry: ${{vars.DOCKER_REGISTRY}}
          docker-tag: ${{needs.get-build-info.outputs.docker-tag}}
          namespace: ${{ needs.get-build-info.outputs.namespace }}
          config-envs: CLUSTER_ISSUER

  build-and-deploy-frontend:
    needs: [changes, get-build-info, clone-repo]
    name: Build and Deploy Frontend
    if: ${{ needs.changes.outputs.frontend == 'true' || needs.get-build-info.outputs.frontend-exists == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/docker
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tag: ${{needs.get-build-info.outputs.docker-tag}}
          path: frontend
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi
          branch: ${{needs.get-build-info.outputs.name}}
      - name: Create/Update Backend Deployment
        uses: ./.github/actions/k8s
        env:
          CLUSTER_ISSUER: ${{secrets.CERT_MANAGER_CLUSTER_ISSUER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          deployment: boshi-frontend
          domain: ${{ steps.domain.outputs.domain }}
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/frontend.yaml
          docker-registry: ${{vars.DOCKER_REGISTRY}}
          docker-tag: ${{needs.get-build-info.outputs.docker-tag}}
          namespace: ${{ needs.get-build-info.outputs.namespace }}
          config-envs: CLUSTER_ISSUER

  build-explorer:
    needs: [changes, get-build-info, clone-repo]
    name: Build and Deploy Explorer
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/docker
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tag: ${{needs.get-build-info.outputs.docker-tag}}
          path: explorer
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi
          branch: ${{needs.get-build-info.outputs.name}}
      - name: Create/Update Backend Deployment
        uses: ./.github/actions/k8s
        env:
          POSTGRES_URL: ${{secrets.POSTGRES_URL}}
          SOCKET_URI: ${{secrets.SOCKET_URI}}
          FIREHOSE_IDENTIFIER: ${{secrets.FIREHOSE_IDENTIFIER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          deployment: boshi-frontend
          domain: ${{ steps.domain.outputs.domain }}
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/explorer.yaml
          docker-registry: ${{vars.DOCKER_REGISTRY}}
          docker-tag: ${{needs.get-build-info.outputs.docker-tag}}
          namespace: ${{ needs.get-build-info.outputs.namespace }}
          config-envs: POSTGRES_URL,SOCKET_URI,FIREHOSE_IDENTIFIER

  cleanup:
    needs:
      [
        get-build-info,
        deploy-backend,
        deploy-landing,
        deploy-frontend,
        deploy-explorer,
      ]
    runs-on: ubuntu-latest
    if:
      contains(fromJson('["success", "failure"]'), needs.deploy-frontend.result) ||
      contains(fromJson('["success", "failure"]'), needs.deploy-backend.result) ||
      contains(fromJson('["success", "failure"]'), needs.deploy-landing.result) ||
      contains(fromJson('["success", "failure"]'), needs.deploy-explorer.result)
    steps:
      - name: Cleanup Worker
        uses: appleboy/ssh-action@v1.0.3
        env:
          REPO_DESTINATION: ${{needs.clone-repo.outputs.repo-destination}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: REPO_DESTINATION
          script: |
            rm -rf $REPO_DESTINATION
