name: Branch Push
on: push
jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      landing: ${{ steps.filter.outputs.landing }}
      frontend: ${{ steps.filter.outputs.frontend }}
      explorer: ${{ steps.filter.outputs.explorer }}
      tourbillon: ${{ steps.filter.outputs.tourbillon }}
      kubernetes: ${{ steps.filter.outputs.kubernetes }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.head_ref || github.ref_name }}
          list-files: "json"
          filters: |
            landing:
              - 'landing/**'
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            explorer:
              - 'explorer/**'
            tourbillon:
              - 'tourbillon/**'
            kubernetes:
              - 'kubernetes/**'

  build-info:
    needs: changes
    name: Get Build Info
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.landing == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.explorer == 'true' || needs.changes.outputs.tourbillon == 'true' || needs.changes.outputs.kubernetes == 'true' }}
    outputs:
      branch-name: ${{ steps.build-info.outputs.branch-name }}
      namespace: ${{ steps.build-info.outputs.namespace }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-info
        id: build-info

  clone-repo:
    name: Clone Repo
    needs: [build-info]
    runs-on: ubuntu-latest
    outputs:
      repo-destination: ${{ steps.destination.outputs.repo-destination }}
    steps:
      - uses: actions/checkout@v4
      - shell: bash
        id: destination
        run: |
          echo "repo-destination=$(mktemp -d)" >> $GITHUB_OUTPUT
      - uses: appleboy/ssh-action@v1.2.0
        name: Clone Repo
        id: clone
        env:
          DESTINATION: ${{ steps.destination.outputs.repo-destination }}
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: BRANCH_NAME,DESTINATION,REPO_URL
          script: |
            echo "Cloning repo..."
            mkdir -p $DESTINATION
            echo ${BRANCH_NAME}
            echo ${REPO_URL}
            echo $DESTINATION
            git clone --depth 1 -b ${BRANCH_NAME} ${REPO_URL} $DESTINATION

  build-and-deploy-backend:
    needs: [changes, build-info, clone-repo]
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Image
        if: ${{ needs.changes.outputs.backend == 'true' }}
        uses: ./.github/actions/docker
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tag: ${{ github.sha }}
          path: backend
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi
          dev: ${{needs.build-info.outputs.branch-name}}-boshi
      - name: Create/Update Deployment
        uses: ./.github/actions/k8s/deploy
        env:
          CLUSTER_ISSUER: ${{secrets.CERT_MANAGER_CLUSTER_ISSUER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          domain: ${{ steps.domain.outputs.domain }}.deguzman.cloud
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/backend.yaml
          docker-image: ${{vars.DOCKER_REGISTRY}}/boshi-backend:${{github.sha}}
          namespace: ${{ needs.build-info.outputs.namespace }}
          config-envs: CLUSTER_ISSUER

  build-and-deploy-landing:
    needs: [changes, build-info, clone-repo]
    name: Build and Deploy Landing
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/docker
        if: ${{ needs.changes.outputs.landing == 'true' }}
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tag: ${{github.sha}}
          path: landing
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi-app
          dev: ${{needs.build-info.outputs.branch-name}}-boshi-app
      - name: Create/Update Deployment
        uses: ./.github/actions/k8s/deploy
        env:
          CLUSTER_ISSUER: ${{secrets.CERT_MANAGER_CLUSTER_ISSUER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          domain: ${{ steps.domain.outputs.domain }}.deguzman.cloud
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/landing.yaml
          docker-image: ${{vars.DOCKER_REGISTRY}}/boshi-landing:${{github.sha}}
          namespace: ${{ needs.build-info.outputs.namespace }}
          config-envs: CLUSTER_ISSUER

  build-and-deploy-frontend:
    needs: [changes, build-info, clone-repo]
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/docker
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tag: ${{ github.sha }}
          path: frontend
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi
          dev: ${{needs.build-info.outputs.branch-name}}-boshi
      - name: Create/Update Deployment
        uses: ./.github/actions/k8s/deploy
        env:
          CLUSTER_ISSUER: ${{secrets.CERT_MANAGER_CLUSTER_ISSUER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          domain: ${{ steps.domain.outputs.domain }}.deguzman.cloud
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/frontend.yaml
          docker-image: ${{vars.DOCKER_REGISTRY}}/boshi-frontend:${{github.sha}}
          namespace: ${{ needs.build-info.outputs.namespace }}
          config-envs: CLUSTER_ISSUER

  build-and-deploy-explorer:
    needs: [changes, build-info, clone-repo]
    name: Build and Deploy Explorer
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/docker
        if: ${{ needs.changes.outputs.explorer == 'true' }}
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tag: ${{ github.sha }}
          path: explorer
      - name: Create/Update Deployment
        uses: ./.github/actions/k8s/deploy
        env:
          POSTGRES_URL: ${{secrets.POSTGRES_URL}}
          SOCKET_URI: ${{secrets.SOCKET_URI}}
          FIREHOSE_IDENTIFIER: ${{secrets.FIREHOSE_IDENTIFIER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/explorer.yaml
          docker-image: ${{vars.DOCKER_REGISTRY}}/boshi-explorer:${{github.sha}}
          namespace: ${{ needs.build-info.outputs.namespace }}
          config-envs: POSTGRES_URL,SOCKET_URI,FIREHOSE_IDENTIFIER

  build-and-deploy-tourbillon:
    needs: [changes, build-info, clone-repo]
    name: Build and Deploy Tourbillon
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/domain
        id: domain
        with:
          prod: boshi-tourbillon
          dev: ${{needs.build-info.outputs.branch-name}}-boshi-tourbillon
      - uses: ./.github/actions/docker
        if: ${{ needs.changes.outputs.tourbillon == 'true' }}
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tag: ${{ github.sha }}
          path: tourbillon
      - name: Create/Update Deployment
        uses: ./.github/actions/k8s/deploy
        env:
          FEEDGEN_PORT: ${{secrets.FEEDGEN_PORT}}
          FEEDGEN_LISTENHOST: ${{secrets.FEEDGEN_LISTENHOST}}
          FEEDGEN_POSTGRES_DATABASE: ${{secrets.POSTGRES_DATABASE}}
          FEEDGEN_POSTGRES_USERNAME: ${{secrets.POSTGRES_USERNAME}}
          FEEDGEN_POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          FEEDGEN_POSTGRES_HOST: ${{secrets.POSTGRES_HOST}}
          FEEDGEN_POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
          FEEDGEN_SUBSCRIPTION_ENDPOINT: ${{secrets.FEEDGEN_SUBSCRIPTION_ENDPOINT}}
          FEEDGEN_HOSTNAME: ${{ steps.domain.outputs.domain }}.deguzman.cloud
          FEEDGEN_PUBLISHER_DID: ${{secrets.FEEDGEN_PUBLISHER_DID}}
          FEEDGEN_SUBSCRIPTION_RECONNECT_DELAY: ${{secrets.FEEDGEN_SUBSCRIPTION_RECONNECT_DELAY}}
          CLUSTER_ISSUER: ${{secrets.CERT_MANAGER_CLUSTER_ISSUER}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          config-path: ${{needs.clone-repo.outputs.repo-destination}}/kubernetes/tourbillon.yaml
          domain: ${{ steps.domain.outputs.domain }}.deguzman.cloud
          docker-image: ${{vars.DOCKER_REGISTRY}}/boshi-tourbillon:${{github.sha}}
          namespace: ${{ needs.build-info.outputs.namespace }}
          config-envs: FEEDGEN_PORT,FEEDGEN_LISTENHOST, FEEDGEN_POSTGRES_LOCATION,FEEDGEN_POSTGRES_DATABASE,FEEDGEN_POSTGRES_USERNAME,FEEDGEN_POSTGRES_PASSWORD,FEEDGEN_POSTGRES_HOST,FEEDGEN_POSTGRES_PORT,FEEDGEN_SUBSCRIPTION_ENDPOINT,FEEDGEN_HOSTNAME,FEEDGEN_PUBLISHER_DID,FEEDGEN_SUBSCRIPTION_RECONNECT_DELAY,CLUSTER_ISSUER

  cleanup:
    needs:
      [
        build-info,
        clone-repo,
        build-and-deploy-backend,
        build-and-deploy-landing,
        build-and-deploy-frontend,
        build-and-deploy-explorer,
        build-and-deploy-tourbillon,
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup Worker
        uses: appleboy/ssh-action@v1.2.0
        env:
          REPO_DESTINATION: ${{needs.clone-repo.outputs.repo-destination}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: REPO_DESTINATION
          script: |
            rm -rf ${REPO_DESTINATION}
