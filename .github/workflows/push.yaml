name: Branch Push
on: push
jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      changes: ${{ steps.filter.outputs.src }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          src:
            - 'go.mod'
            - 'cmd/**'
            - 'internal/**'
            - '.github/workflows/push.yaml'
            - '.dockerignore'
            - 'Dockerfile'

  convert-branch-name:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.changes == 'true' }}
    outputs:
      name: ${{ steps.convert.outputs.name }}
    steps:
      - id: convert
        env:
            BRANCH_NAME: "${{ github.head_ref || github.ref_name }}"
        run: |
          output=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed -E 's/^-+|-+$//g')
          echo "name=$output" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs: convert-branch-name
    env:
        BRANCH_NAME: ${{needs.convert-branch-name.outputs.name}}
    steps:
    - uses: actions/checkout@v4
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build image
      run: make docker
    - name: Push image with commit sha
      run: make docker-push TAG=$BRANCH_NAME-$(git rev-parse --short "$GITHUB_SHA")
    - name: Push image with latest tag
      run: >-
        if [[ $BRANCH_NAME == "main" ]]; then
          make docker-push TAG=latest
        else
          make docker-push TAG=$BRANCH_NAME-latest
        fi
  deploy:
    needs: [build, convert-branch-name]
    name: Create Deployment
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{needs.convert-branch-name.outputs.name}}
      REGISTRY: ${{ vars.DOCKER_REGISTRY }}
    steps:
      - name: Create Deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: BRANCH_NAME,REGISTRY
          script: |-
            if [[ $BRANCH_NAME == "main" ]]; then
              export NAMESPACE="boshi";
            else
              export NAMESPACE="boshi-$BRANCH_NAME";
            fi

            if kubectl get namespace $NAMESPACE >/dev/null 2>&1; then
              kubectl rollout restart deployment boshi-backend -n $NAMESPACE
            else
              kubectl create namespace $NAMESPACE
              kubectl create deployment boshi-backend --image=$REGISTRY/boshi-backend:$BRANCH_NAME-latest --port=80 -n $NAMESPACE
              kubectl expose deployment boshi-backend --name=boshi-svc --port=80 --target-port=80 --type=ClusterIP -n $NAMESPACE
              kubectl create ingress ingress --annotation cert-manager.io/cluster-issuer="letsencrypt-prod" --class=nginx --rule="$BRANCH_NAME-api-boshi.deguzman.cloud/*=boshi-svc:80,tls=boshi-tls" -n $NAMESPACE
            fi

