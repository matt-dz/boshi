# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
    - avoid_empty_else
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - annotate_redeclares
    - avoid_catching_errors
    - avoid_double_and_int_checks
    - avoid_dynamic_calls
    - avoid_escaping_inner_quotes
    - camel_case_types
    - cast_nullable_to_non_nullable
    - close_sinks
    - curly_braces_in_flow_control_structures
    - eol_at_end_of_file
    - exhaustive_cases
    - file_names
    - invalid_case_patterns
    - leading_newlines_in_multiline_strings
    - lines_longer_than_80_chars
    - only_throw_errors
    - prefer_asserts_in_initializer_lists
    - prefer_const_literals_to_create_immutables
    - prefer_contains
    - prefer_single_quotes
    - prefer_final_locals
    - prefer_foreach
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    - require_trailing_commas
    - test_types_in_equals
    - throw_in_finally
    - unnecessary_breaks
    - unnecessary_const
    - unnecessary_constructor_name
    - unnecessary_getters_setters
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_overrides
    - unnecessary_statements
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - unnecessary_to_list_in_spreads
    - unnecessary_underscores
    - unrelated_type_equality_checks
    - use_colored_box
    - use_decorated_box
    - use_enums
    - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    - use_string_buffers
    - use_truncating_division
    - valid_regexps
    - void_checks
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
