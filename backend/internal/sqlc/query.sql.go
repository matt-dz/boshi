// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"
)

const addToMailList = `-- name: AddToMailList :exec
INSERT INTO mail_list (email) VALUES ($1)
`

func (q *Queries) AddToMailList(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, addToMailList, email)
	return err
}

const upsertEmail = `-- name: UpsertEmail :one
INSERT INTO emails (user_id, email)
VALUES ($1, $2) ON CONFLICT (user_id) DO UPDATE
SET email = EXCLUDED.email
RETURNING user_id, email, created_at, verified_at
`

type UpsertEmailParams struct {
	UserID string
	Email  string
}

func (q *Queries) UpsertEmail(ctx context.Context, arg UpsertEmailParams) (Email, error) {
	row := q.db.QueryRow(ctx, upsertEmail, arg.UserID, arg.Email)
	var i Email
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.CreatedAt,
		&i.VerifiedAt,
	)
	return i, err
}

const verifyEmail = `-- name: VerifyEmail :one
UPDATE emails
SET verified_at = NOW()
WHERE user_id = $1 AND email = $2
RETURNING email
`

type VerifyEmailParams struct {
	UserID string
	Email  string
}

func (q *Queries) VerifyEmail(ctx context.Context, arg VerifyEmailParams) (string, error) {
	row := q.db.QueryRow(ctx, verifyEmail, arg.UserID, arg.Email)
	var email string
	err := row.Scan(&email)
	return email, err
}
