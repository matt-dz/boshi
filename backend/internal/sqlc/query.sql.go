// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"
)

const addToMailList = `-- name: AddToMailList :exec
INSERT INTO mail_list (email) VALUES ($1)
`

func (q *Queries) AddToMailList(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, addToMailList, email)
	return err
}

const addUnverifiedEmail = `-- name: AddUnverifiedEmail :one
INSERT INTO emails (email)
VALUES ($1) ON CONFLICT (email) DO UPDATE
SET email = EXCLUDED.email
RETURNING email, created_at, verified_at
`

func (q *Queries) AddUnverifiedEmail(ctx context.Context, email string) (Email, error) {
	row := q.db.QueryRow(ctx, addUnverifiedEmail, email)
	var i Email
	err := row.Scan(&i.Email, &i.CreatedAt, &i.VerifiedAt)
	return i, err
}

const verifyEmail = `-- name: VerifyEmail :one
UPDATE emails SET verified_at = NOW() WHERE email = $1 RETURNING email
`

func (q *Queries) VerifyEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRow(ctx, verifyEmail, email)
	err := row.Scan(&email)
	return email, err
}
